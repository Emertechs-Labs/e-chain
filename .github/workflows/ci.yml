name: CI/CD Pipeline

on:
  push:
    branches: [main, blockchain, develop]
  pull_request:
    branches: [main, blockchain, develop]

env:
  FOUNDRY_PROFILE: ci

jobs:
  # ============ Smart Contract Tests ============
  test-contracts:
    name: Test Smart Contracts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Run Forge build
        run: |
          cd blockchain
          forge --version
          forge build --sizes
        id: build

      - name: Run Forge tests
        run: |
          cd blockchain
          forge test -vvv
        id: test

      - name: Run Forge coverage
        run: |
          cd blockchain
          forge coverage --report summary
        id: coverage

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: contract-coverage
          path: blockchain/coverage/

  # ============ Security Scan ============
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test-contracts
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Slither
        uses: crytic/slither-action@v0.4.0
        continue-on-error: true
        with:
          target: blockchain/contracts/
          slither-args: --filter-paths "node_modules|test" --exclude naming-convention,solc-version
          fail-on: high

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Run Mythril (if available)
        continue-on-error: true
        run: |
          cd blockchain
          # Mythril requires Docker - skip for now
          echo "Mythril scan skipped (requires Docker setup)"

  # ============ Frontend Tests ============
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: |
          cd frontend
          npm run type-check

      - name: Lint
        run: |
          cd frontend
          npm run lint

      - name: Run tests
        run: |
          cd frontend
          npm test -- --passWithNoTests
        continue-on-error: true

      - name: Build
        run: |
          cd frontend
          npm run build
        env:
          NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID || 'test' }}
          NEXT_PUBLIC_ALCHEMY_API_KEY: ${{ secrets.NEXT_PUBLIC_ALCHEMY_API_KEY || 'test' }}

  # ============ Wallet Package Tests ============
  test-wallet:
    name: Test Wallet Package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build wallet package
        run: |
          cd packages/wallet
          npm run build

      - name: Run wallet tests
        run: |
          cd packages/wallet
          npm test -- --passWithNoTests
        continue-on-error: true

  # ============ Code Quality ============
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for console statements
        run: |
          echo "Checking for console statements in frontend..."
          CONSOLE_COUNT=$(grep -r "console\." frontend/app frontend/components frontend/hooks frontend/lib --include="*.ts" --include="*.tsx" | wc -l || echo "0")
          echo "Found $CONSOLE_COUNT console statements"
          if [ "$CONSOLE_COUNT" -gt 50 ]; then
            echo "::warning::Too many console statements found ($CONSOLE_COUNT). Consider using the logger."
          fi

      - name: Check bundle size
        run: |
          cd frontend
          npm run build
          echo "Build completed. Check .next/analyze for bundle size report."
        continue-on-error: true

  # ============ Documentation ============
  check-docs:
    name: Documentation Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for broken links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          config-file: '.github/markdown-link-check-config.json'
        continue-on-error: true

      - name: Verify README exists
        run: |
          test -f README.md || (echo "README.md not found" && exit 1)
          test -f blockchain/README.md || echo "::warning::blockchain/README.md not found"
          test -f frontend/README.md || echo "::warning::frontend/README.md not found"

  # ============ Deployment Readiness ============
  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [test-contracts, test-frontend, security-scan]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check environment files
        run: |
          test -f frontend/.env.example || (echo ".env.example not found" && exit 1)
          test -f blockchain/.env.example || (echo "blockchain/.env.example not found" && exit 1)

      - name: Verify deployment scripts
        run: |
          test -f blockchain/script/Deploy.s.sol || echo "::warning::Deploy.s.sol not found"

      - name: Check for security vulnerabilities
        run: |
          npm audit --audit-level=high
        continue-on-error: true

  # ============ Summary ============
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [test-contracts, test-frontend, test-wallet, security-scan, code-quality, check-docs]
    if: always()
    steps:
      - name: Check job statuses
        run: |
          echo "## CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Contracts**: ${{ needs.test-contracts.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend**: ${{ needs.test-frontend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Wallet**: ${{ needs.test-wallet.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security**: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Quality**: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Documentation**: ${{ needs.check-docs.result }}" >> $GITHUB_STEP_SUMMARY

      - name: Fail if critical jobs failed
        if: |
          needs.test-contracts.result == 'failure' ||
          needs.test-frontend.result == 'failure'
        run: exit 1
