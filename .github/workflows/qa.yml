name: QA Checks

on:
  push:
    branches: [ preview, main ]
  pull_request:
    branches: [ main ]

jobs:
  qa:
    runs-on: ubuntu-latest
    container:
      image: node:18
      options: --user root

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for git checks

    - name: Install system dependencies
      run: |
        apt-get update && apt-get install -y \
          jq \
          curl \
          git \
          && rm -rf /var/lib/apt/lists/*

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd blockchain && npm ci && cd ..
        cd frontend && npm ci && cd ..

    - name: Install gitleaks
      run: |
        curl -sSfL https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks-linux-amd64.tar.gz | tar -xz
        mv gitleaks /usr/local/bin/
        chmod +x /usr/local/bin/gitleaks

    - name: Run gitleaks secret scan
      run: |
        gitleaks detect --verbose --redact --config .gitleaks.toml || true

    - name: Run QA Agent
      run: |
        bash scripts/qa-agent.sh
      env:
        QA_TRIGGER: CI
      continue-on-error: false

    - name: Upload QA artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: qa-results-${{ github.run_id }}
        path: |
          /tmp/echain-qa-*/qa-report.json
          docs/qalog.md
        retention-days: 30

    - name: Comment PR with QA results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');

          // Read QA report if it exists
          let qaReport = null;
          try {
            const reportPath = path.join(process.env.GITHUB_WORKSPACE, 'qa-report.json');
            if (fs.existsSync(reportPath)) {
              qaReport = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
            }
          } catch (e) {
            console.log('No QA report found');
          }

          let body = '## üõ°Ô∏è QA Check Results\n\n';
          if (qaReport) {
            body += `**Status:** ${qaReport.status === 'success' ? '‚úÖ Passed' : '‚ùå Failed'}\n`;
            body += `**Duration:** ${qaReport.duration}s\n`;
            body += `**Errors:** ${qaReport.errors}\n`;
            body += `**Warnings:** ${qaReport.warnings}\n\n`;
          } else {
            body += 'QA report not found. Check the artifacts for details.\n\n';
          }

          body += '[View QA Artifacts](' + context.payload.repository.html_url + '/actions/runs/' + context.runId + ')\n';

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });