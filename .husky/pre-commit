#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

echo "üîç Running pre-commit checks..."

# Check if we're in the root directory
if [ ! -f "package.json" ]; then
  echo "‚ùå Not in project root directory"
  exit 1
fi

# Run lint-staged for staged files
echo "üìù Checking staged files..."
npx lint-staged

# Check for console statements in staged files
echo "üîç Checking for console statements..."
STAGED_TS_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(ts|tsx)$' | grep -v 'node_modules' || true)

if [ -n "$STAGED_TS_FILES" ]; then
  CONSOLE_COUNT=0
  for file in $STAGED_TS_FILES; do
    if [ -f "$file" ]; then
      FILE_CONSOLE_COUNT=$(grep -c "console\." "$file" 2>/dev/null || echo "0")
      if [ "$FILE_CONSOLE_COUNT" -gt 0 ]; then
        echo "‚ö†Ô∏è  Warning: $file contains $FILE_CONSOLE_COUNT console statement(s)"
        CONSOLE_COUNT=$((CONSOLE_COUNT + FILE_CONSOLE_COUNT))
      fi
    fi
  done
  
  if [ "$CONSOLE_COUNT" -gt 0 ]; then
    echo ""
    echo "‚ö†Ô∏è  Found $CONSOLE_COUNT console statement(s) in staged files"
    echo "üí° Consider using the logger instead:"
    echo "   import { logger } from '@/lib/logger';"
    echo ""
    echo "To proceed anyway, use: git commit --no-verify"
    # Uncomment the next line to block commits with console statements
    # exit 1
  fi
fi

# Type check for TypeScript files
if [ -n "$STAGED_TS_FILES" ]; then
  echo "üîß Running TypeScript type check..."
  cd frontend
  npm run type-check --if-present
  TYPE_CHECK_EXIT=$?
  cd ..
  
  if [ $TYPE_CHECK_EXIT -ne 0 ]; then
    echo "‚ùå TypeScript type check failed"
    exit 1
  fi
fi

echo "‚úÖ Pre-commit checks passed!"
