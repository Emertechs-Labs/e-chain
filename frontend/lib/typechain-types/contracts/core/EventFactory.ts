/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IEventFactory {
  export type EventStruct = {
    id: BigNumberish;
    organizer: AddressLike;
    ticketContract: AddressLike;
    poapContract: AddressLike;
    incentiveContract: AddressLike;
    name: string;
    metadataURI: string;
    ticketPrice: BigNumberish;
    maxTickets: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    isActive: boolean;
    createdAt: BigNumberish;
  };

  export type EventStructOutput = [
    id: bigint,
    organizer: string,
    ticketContract: string,
    poapContract: string,
    incentiveContract: string,
    name: string,
    metadataURI: string,
    ticketPrice: bigint,
    maxTickets: bigint,
    startTime: bigint,
    endTime: bigint,
    isActive: boolean,
    createdAt: bigint
  ] & {
    id: bigint;
    organizer: string;
    ticketContract: string;
    poapContract: string;
    incentiveContract: string;
    name: string;
    metadataURI: string;
    ticketPrice: bigint;
    maxTickets: bigint;
    startTime: bigint;
    endTime: bigint;
    isActive: boolean;
    createdAt: bigint;
  };
}

export interface EventFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createEvent"
      | "emergencyDeactivateEvent"
      | "eventCount"
      | "eventTicketTemplate"
      | "events"
      | "getActiveEvents"
      | "getEventDetails"
      | "getOrganizerEvents"
      | "incentiveTemplate"
      | "isVerifiedOrganizer"
      | "organizerEvents"
      | "owner"
      | "pause"
      | "paused"
      | "platformFeeBps"
      | "poapTemplate"
      | "renounceOwnership"
      | "setEventStatus"
      | "setIncentiveContract"
      | "setIncentiveTemplate"
      | "setPOAPContract"
      | "setPOAPTemplate"
      | "setPlatformFee"
      | "setTreasury"
      | "transferOwnership"
      | "treasury"
      | "unpause"
      | "unverifyOrganizer"
      | "updateEvent"
      | "verifiedOrganizers"
      | "verifyOrganizer"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EventCreated"
      | "EventStatusChanged"
      | "EventUpdated"
      | "OrganizerUnverified"
      | "OrganizerVerified"
      | "OwnershipTransferred"
      | "Paused"
      | "PlatformFeeUpdated"
      | "TreasuryUpdated"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createEvent",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyDeactivateEvent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "eventCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eventTicketTemplate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "events",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveEvents",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEventDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrganizerEvents",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "incentiveTemplate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isVerifiedOrganizer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "organizerEvents",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformFeeBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poapTemplate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setEventStatus",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIncentiveContract",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setIncentiveTemplate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPOAPContract",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPOAPTemplate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasury",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unverifyOrganizer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEvent",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifiedOrganizers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyOrganizer",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "createEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyDeactivateEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eventCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eventTicketTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "events", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActiveEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEventDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrganizerEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incentiveTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVerifiedOrganizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "organizerEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poapTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEventStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIncentiveContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIncentiveTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPOAPContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPOAPTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unverifyOrganizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifiedOrganizers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyOrganizer",
    data: BytesLike
  ): Result;
}

export namespace EventCreatedEvent {
  export type InputTuple = [
    eventId: BigNumberish,
    organizer: AddressLike,
    ticketContract: AddressLike,
    name: string,
    ticketPrice: BigNumberish,
    maxTickets: BigNumberish
  ];
  export type OutputTuple = [
    eventId: bigint,
    organizer: string,
    ticketContract: string,
    name: string,
    ticketPrice: bigint,
    maxTickets: bigint
  ];
  export interface OutputObject {
    eventId: bigint;
    organizer: string;
    ticketContract: string;
    name: string;
    ticketPrice: bigint;
    maxTickets: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EventStatusChangedEvent {
  export type InputTuple = [eventId: BigNumberish, isActive: boolean];
  export type OutputTuple = [eventId: bigint, isActive: boolean];
  export interface OutputObject {
    eventId: bigint;
    isActive: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EventUpdatedEvent {
  export type InputTuple = [
    eventId: BigNumberish,
    name: string,
    metadataURI: string
  ];
  export type OutputTuple = [
    eventId: bigint,
    name: string,
    metadataURI: string
  ];
  export interface OutputObject {
    eventId: bigint;
    name: string;
    metadataURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrganizerUnverifiedEvent {
  export type InputTuple = [organizer: AddressLike];
  export type OutputTuple = [organizer: string];
  export interface OutputObject {
    organizer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrganizerVerifiedEvent {
  export type InputTuple = [organizer: AddressLike];
  export type OutputTuple = [organizer: string];
  export interface OutputObject {
    organizer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlatformFeeUpdatedEvent {
  export type InputTuple = [newFeeBps: BigNumberish];
  export type OutputTuple = [newFeeBps: bigint];
  export interface OutputObject {
    newFeeBps: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreasuryUpdatedEvent {
  export type InputTuple = [newTreasury: AddressLike];
  export type OutputTuple = [newTreasury: string];
  export interface OutputObject {
    newTreasury: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EventFactory extends BaseContract {
  connect(runner?: ContractRunner | null): EventFactory;
  waitForDeployment(): Promise<this>;

  interface: EventFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createEvent: TypedContractMethod<
    [
      name: string,
      metadataURI: string,
      ticketPrice: BigNumberish,
      maxTickets: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  emergencyDeactivateEvent: TypedContractMethod<
    [eventId: BigNumberish],
    [void],
    "nonpayable"
  >;

  eventCount: TypedContractMethod<[], [bigint], "view">;

  eventTicketTemplate: TypedContractMethod<[], [string], "view">;

  events: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint
      ] & {
        id: bigint;
        organizer: string;
        ticketContract: string;
        poapContract: string;
        incentiveContract: string;
        name: string;
        metadataURI: string;
        ticketPrice: bigint;
        maxTickets: bigint;
        startTime: bigint;
        endTime: bigint;
        isActive: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  getActiveEvents: TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish],
    [[bigint[], boolean] & { eventIds: bigint[]; hasMore: boolean }],
    "view"
  >;

  getEventDetails: TypedContractMethod<
    [eventId: BigNumberish],
    [IEventFactory.EventStructOutput],
    "view"
  >;

  getOrganizerEvents: TypedContractMethod<
    [organizer: AddressLike],
    [bigint[]],
    "view"
  >;

  incentiveTemplate: TypedContractMethod<[], [string], "view">;

  isVerifiedOrganizer: TypedContractMethod<
    [organizer: AddressLike],
    [boolean],
    "view"
  >;

  organizerEvents: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  platformFeeBps: TypedContractMethod<[], [bigint], "view">;

  poapTemplate: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setEventStatus: TypedContractMethod<
    [eventId: BigNumberish, isActive: boolean],
    [void],
    "nonpayable"
  >;

  setIncentiveContract: TypedContractMethod<
    [eventId: BigNumberish, incentiveContract: AddressLike],
    [void],
    "nonpayable"
  >;

  setIncentiveTemplate: TypedContractMethod<
    [newTemplate: AddressLike],
    [void],
    "nonpayable"
  >;

  setPOAPContract: TypedContractMethod<
    [eventId: BigNumberish, poapContract: AddressLike],
    [void],
    "nonpayable"
  >;

  setPOAPTemplate: TypedContractMethod<
    [newTemplate: AddressLike],
    [void],
    "nonpayable"
  >;

  setPlatformFee: TypedContractMethod<
    [newFeeBps: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTreasury: TypedContractMethod<
    [newTreasury: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  treasury: TypedContractMethod<[], [string], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  unverifyOrganizer: TypedContractMethod<
    [organizer: AddressLike],
    [void],
    "nonpayable"
  >;

  updateEvent: TypedContractMethod<
    [eventId: BigNumberish, name: string, metadataURI: string],
    [void],
    "nonpayable"
  >;

  verifiedOrganizers: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  verifyOrganizer: TypedContractMethod<
    [organizer: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createEvent"
  ): TypedContractMethod<
    [
      name: string,
      metadataURI: string,
      ticketPrice: BigNumberish,
      maxTickets: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyDeactivateEvent"
  ): TypedContractMethod<[eventId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "eventCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "eventTicketTemplate"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "events"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint
      ] & {
        id: bigint;
        organizer: string;
        ticketContract: string;
        poapContract: string;
        incentiveContract: string;
        name: string;
        metadataURI: string;
        ticketPrice: bigint;
        maxTickets: bigint;
        startTime: bigint;
        endTime: bigint;
        isActive: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getActiveEvents"
  ): TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish],
    [[bigint[], boolean] & { eventIds: bigint[]; hasMore: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEventDetails"
  ): TypedContractMethod<
    [eventId: BigNumberish],
    [IEventFactory.EventStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOrganizerEvents"
  ): TypedContractMethod<[organizer: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "incentiveTemplate"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isVerifiedOrganizer"
  ): TypedContractMethod<[organizer: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "organizerEvents"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "platformFeeBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "poapTemplate"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setEventStatus"
  ): TypedContractMethod<
    [eventId: BigNumberish, isActive: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIncentiveContract"
  ): TypedContractMethod<
    [eventId: BigNumberish, incentiveContract: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIncentiveTemplate"
  ): TypedContractMethod<[newTemplate: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPOAPContract"
  ): TypedContractMethod<
    [eventId: BigNumberish, poapContract: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPOAPTemplate"
  ): TypedContractMethod<[newTemplate: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPlatformFee"
  ): TypedContractMethod<[newFeeBps: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTreasury"
  ): TypedContractMethod<[newTreasury: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unverifyOrganizer"
  ): TypedContractMethod<[organizer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateEvent"
  ): TypedContractMethod<
    [eventId: BigNumberish, name: string, metadataURI: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifiedOrganizers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "verifyOrganizer"
  ): TypedContractMethod<[organizer: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "EventCreated"
  ): TypedContractEvent<
    EventCreatedEvent.InputTuple,
    EventCreatedEvent.OutputTuple,
    EventCreatedEvent.OutputObject
  >;
  getEvent(
    key: "EventStatusChanged"
  ): TypedContractEvent<
    EventStatusChangedEvent.InputTuple,
    EventStatusChangedEvent.OutputTuple,
    EventStatusChangedEvent.OutputObject
  >;
  getEvent(
    key: "EventUpdated"
  ): TypedContractEvent<
    EventUpdatedEvent.InputTuple,
    EventUpdatedEvent.OutputTuple,
    EventUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OrganizerUnverified"
  ): TypedContractEvent<
    OrganizerUnverifiedEvent.InputTuple,
    OrganizerUnverifiedEvent.OutputTuple,
    OrganizerUnverifiedEvent.OutputObject
  >;
  getEvent(
    key: "OrganizerVerified"
  ): TypedContractEvent<
    OrganizerVerifiedEvent.InputTuple,
    OrganizerVerifiedEvent.OutputTuple,
    OrganizerVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PlatformFeeUpdated"
  ): TypedContractEvent<
    PlatformFeeUpdatedEvent.InputTuple,
    PlatformFeeUpdatedEvent.OutputTuple,
    PlatformFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TreasuryUpdated"
  ): TypedContractEvent<
    TreasuryUpdatedEvent.InputTuple,
    TreasuryUpdatedEvent.OutputTuple,
    TreasuryUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "EventCreated(uint256,address,address,string,uint256,uint256)": TypedContractEvent<
      EventCreatedEvent.InputTuple,
      EventCreatedEvent.OutputTuple,
      EventCreatedEvent.OutputObject
    >;
    EventCreated: TypedContractEvent<
      EventCreatedEvent.InputTuple,
      EventCreatedEvent.OutputTuple,
      EventCreatedEvent.OutputObject
    >;

    "EventStatusChanged(uint256,bool)": TypedContractEvent<
      EventStatusChangedEvent.InputTuple,
      EventStatusChangedEvent.OutputTuple,
      EventStatusChangedEvent.OutputObject
    >;
    EventStatusChanged: TypedContractEvent<
      EventStatusChangedEvent.InputTuple,
      EventStatusChangedEvent.OutputTuple,
      EventStatusChangedEvent.OutputObject
    >;

    "EventUpdated(uint256,string,string)": TypedContractEvent<
      EventUpdatedEvent.InputTuple,
      EventUpdatedEvent.OutputTuple,
      EventUpdatedEvent.OutputObject
    >;
    EventUpdated: TypedContractEvent<
      EventUpdatedEvent.InputTuple,
      EventUpdatedEvent.OutputTuple,
      EventUpdatedEvent.OutputObject
    >;

    "OrganizerUnverified(address)": TypedContractEvent<
      OrganizerUnverifiedEvent.InputTuple,
      OrganizerUnverifiedEvent.OutputTuple,
      OrganizerUnverifiedEvent.OutputObject
    >;
    OrganizerUnverified: TypedContractEvent<
      OrganizerUnverifiedEvent.InputTuple,
      OrganizerUnverifiedEvent.OutputTuple,
      OrganizerUnverifiedEvent.OutputObject
    >;

    "OrganizerVerified(address)": TypedContractEvent<
      OrganizerVerifiedEvent.InputTuple,
      OrganizerVerifiedEvent.OutputTuple,
      OrganizerVerifiedEvent.OutputObject
    >;
    OrganizerVerified: TypedContractEvent<
      OrganizerVerifiedEvent.InputTuple,
      OrganizerVerifiedEvent.OutputTuple,
      OrganizerVerifiedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PlatformFeeUpdated(uint256)": TypedContractEvent<
      PlatformFeeUpdatedEvent.InputTuple,
      PlatformFeeUpdatedEvent.OutputTuple,
      PlatformFeeUpdatedEvent.OutputObject
    >;
    PlatformFeeUpdated: TypedContractEvent<
      PlatformFeeUpdatedEvent.InputTuple,
      PlatformFeeUpdatedEvent.OutputTuple,
      PlatformFeeUpdatedEvent.OutputObject
    >;

    "TreasuryUpdated(address)": TypedContractEvent<
      TreasuryUpdatedEvent.InputTuple,
      TreasuryUpdatedEvent.OutputTuple,
      TreasuryUpdatedEvent.OutputObject
    >;
    TreasuryUpdated: TypedContractEvent<
      TreasuryUpdatedEvent.InputTuple,
      TreasuryUpdatedEvent.OutputTuple,
      TreasuryUpdatedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
