/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace Marketplace {
  export type ListingStruct = {
    tokenId: BigNumberish;
    ticketContract: AddressLike;
    seller: AddressLike;
    price: BigNumberish;
    active: boolean;
    listedAt: BigNumberish;
  };

  export type ListingStructOutput = [
    tokenId: bigint,
    ticketContract: string,
    seller: string,
    price: bigint,
    active: boolean,
    listedAt: bigint
  ] & {
    tokenId: bigint;
    ticketContract: string;
    seller: string;
    price: bigint;
    active: boolean;
    listedAt: bigint;
  };
}

export interface MarketplaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approvedContracts"
      | "buyTicket"
      | "cancelListing"
      | "emergencyCancelListing"
      | "getActiveListings"
      | "getListing"
      | "listTicket"
      | "listings"
      | "marketplaceFee"
      | "onERC721Received"
      | "owner"
      | "pause"
      | "paused"
      | "renounceOwnership"
      | "setContractApproval"
      | "setMarketplaceFee"
      | "setTreasury"
      | "transferOwnership"
      | "treasury"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ContractApproved"
      | "ListingCancelled"
      | "MarketplaceFeeUpdated"
      | "OwnershipTransferred"
      | "Paused"
      | "TicketListed"
      | "TicketSold"
      | "TreasuryUpdated"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approvedContracts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "buyTicket",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelListing",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyCancelListing",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveListings",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getListing",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "listTicket",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "listings", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "marketplaceFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setContractApproval",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketplaceFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasury",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "approvedContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyTicket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyCancelListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getListing", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listTicket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketplaceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketplaceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace ContractApprovedEvent {
  export type InputTuple = [ticketContract: AddressLike, approved: boolean];
  export type OutputTuple = [ticketContract: string, approved: boolean];
  export interface OutputObject {
    ticketContract: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ListingCancelledEvent {
  export type InputTuple = [listingId: BytesLike, seller: AddressLike];
  export type OutputTuple = [listingId: string, seller: string];
  export interface OutputObject {
    listingId: string;
    seller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketplaceFeeUpdatedEvent {
  export type InputTuple = [newFee: BigNumberish];
  export type OutputTuple = [newFee: bigint];
  export interface OutputObject {
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TicketListedEvent {
  export type InputTuple = [
    listingId: BytesLike,
    ticketContract: AddressLike,
    tokenId: BigNumberish,
    seller: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [
    listingId: string,
    ticketContract: string,
    tokenId: bigint,
    seller: string,
    price: bigint
  ];
  export interface OutputObject {
    listingId: string;
    ticketContract: string;
    tokenId: bigint;
    seller: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TicketSoldEvent {
  export type InputTuple = [
    listingId: BytesLike,
    buyer: AddressLike,
    seller: AddressLike,
    price: BigNumberish,
    marketplaceFee: BigNumberish
  ];
  export type OutputTuple = [
    listingId: string,
    buyer: string,
    seller: string,
    price: bigint,
    marketplaceFee: bigint
  ];
  export interface OutputObject {
    listingId: string;
    buyer: string;
    seller: string;
    price: bigint;
    marketplaceFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreasuryUpdatedEvent {
  export type InputTuple = [newTreasury: AddressLike];
  export type OutputTuple = [newTreasury: string];
  export interface OutputObject {
    newTreasury: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Marketplace extends BaseContract {
  connect(runner?: ContractRunner | null): Marketplace;
  waitForDeployment(): Promise<this>;

  interface: MarketplaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approvedContracts: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  buyTicket: TypedContractMethod<[listingId: BytesLike], [void], "payable">;

  cancelListing: TypedContractMethod<
    [listingId: BytesLike],
    [void],
    "nonpayable"
  >;

  emergencyCancelListing: TypedContractMethod<
    [listingId: BytesLike],
    [void],
    "nonpayable"
  >;

  getActiveListings: TypedContractMethod<
    [ticketContract: AddressLike, offset: BigNumberish, limit: BigNumberish],
    [[string[], boolean] & { listingIds: string[]; hasMore: boolean }],
    "view"
  >;

  getListing: TypedContractMethod<
    [listingId: BytesLike],
    [Marketplace.ListingStructOutput],
    "view"
  >;

  listTicket: TypedContractMethod<
    [ticketContract: AddressLike, tokenId: BigNumberish, price: BigNumberish],
    [string],
    "nonpayable"
  >;

  listings: TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, string, string, bigint, boolean, bigint] & {
        tokenId: bigint;
        ticketContract: string;
        seller: string;
        price: bigint;
        active: boolean;
        listedAt: bigint;
      }
    ],
    "view"
  >;

  marketplaceFee: TypedContractMethod<[], [bigint], "view">;

  onERC721Received: TypedContractMethod<
    [
      operator: AddressLike,
      from: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [string],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setContractApproval: TypedContractMethod<
    [ticketContract: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setMarketplaceFee: TypedContractMethod<
    [newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTreasury: TypedContractMethod<
    [newTreasury: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  treasury: TypedContractMethod<[], [string], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approvedContracts"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "buyTicket"
  ): TypedContractMethod<[listingId: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "cancelListing"
  ): TypedContractMethod<[listingId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyCancelListing"
  ): TypedContractMethod<[listingId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getActiveListings"
  ): TypedContractMethod<
    [ticketContract: AddressLike, offset: BigNumberish, limit: BigNumberish],
    [[string[], boolean] & { listingIds: string[]; hasMore: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getListing"
  ): TypedContractMethod<
    [listingId: BytesLike],
    [Marketplace.ListingStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "listTicket"
  ): TypedContractMethod<
    [ticketContract: AddressLike, tokenId: BigNumberish, price: BigNumberish],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "listings"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, string, string, bigint, boolean, bigint] & {
        tokenId: bigint;
        ticketContract: string;
        seller: string;
        price: bigint;
        active: boolean;
        listedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "marketplaceFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [
      operator: AddressLike,
      from: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setContractApproval"
  ): TypedContractMethod<
    [ticketContract: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMarketplaceFee"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTreasury"
  ): TypedContractMethod<[newTreasury: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "ContractApproved"
  ): TypedContractEvent<
    ContractApprovedEvent.InputTuple,
    ContractApprovedEvent.OutputTuple,
    ContractApprovedEvent.OutputObject
  >;
  getEvent(
    key: "ListingCancelled"
  ): TypedContractEvent<
    ListingCancelledEvent.InputTuple,
    ListingCancelledEvent.OutputTuple,
    ListingCancelledEvent.OutputObject
  >;
  getEvent(
    key: "MarketplaceFeeUpdated"
  ): TypedContractEvent<
    MarketplaceFeeUpdatedEvent.InputTuple,
    MarketplaceFeeUpdatedEvent.OutputTuple,
    MarketplaceFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "TicketListed"
  ): TypedContractEvent<
    TicketListedEvent.InputTuple,
    TicketListedEvent.OutputTuple,
    TicketListedEvent.OutputObject
  >;
  getEvent(
    key: "TicketSold"
  ): TypedContractEvent<
    TicketSoldEvent.InputTuple,
    TicketSoldEvent.OutputTuple,
    TicketSoldEvent.OutputObject
  >;
  getEvent(
    key: "TreasuryUpdated"
  ): TypedContractEvent<
    TreasuryUpdatedEvent.InputTuple,
    TreasuryUpdatedEvent.OutputTuple,
    TreasuryUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "ContractApproved(address,bool)": TypedContractEvent<
      ContractApprovedEvent.InputTuple,
      ContractApprovedEvent.OutputTuple,
      ContractApprovedEvent.OutputObject
    >;
    ContractApproved: TypedContractEvent<
      ContractApprovedEvent.InputTuple,
      ContractApprovedEvent.OutputTuple,
      ContractApprovedEvent.OutputObject
    >;

    "ListingCancelled(bytes32,address)": TypedContractEvent<
      ListingCancelledEvent.InputTuple,
      ListingCancelledEvent.OutputTuple,
      ListingCancelledEvent.OutputObject
    >;
    ListingCancelled: TypedContractEvent<
      ListingCancelledEvent.InputTuple,
      ListingCancelledEvent.OutputTuple,
      ListingCancelledEvent.OutputObject
    >;

    "MarketplaceFeeUpdated(uint256)": TypedContractEvent<
      MarketplaceFeeUpdatedEvent.InputTuple,
      MarketplaceFeeUpdatedEvent.OutputTuple,
      MarketplaceFeeUpdatedEvent.OutputObject
    >;
    MarketplaceFeeUpdated: TypedContractEvent<
      MarketplaceFeeUpdatedEvent.InputTuple,
      MarketplaceFeeUpdatedEvent.OutputTuple,
      MarketplaceFeeUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "TicketListed(bytes32,address,uint256,address,uint256)": TypedContractEvent<
      TicketListedEvent.InputTuple,
      TicketListedEvent.OutputTuple,
      TicketListedEvent.OutputObject
    >;
    TicketListed: TypedContractEvent<
      TicketListedEvent.InputTuple,
      TicketListedEvent.OutputTuple,
      TicketListedEvent.OutputObject
    >;

    "TicketSold(bytes32,address,address,uint256,uint256)": TypedContractEvent<
      TicketSoldEvent.InputTuple,
      TicketSoldEvent.OutputTuple,
      TicketSoldEvent.OutputObject
    >;
    TicketSold: TypedContractEvent<
      TicketSoldEvent.InputTuple,
      TicketSoldEvent.OutputTuple,
      TicketSoldEvent.OutputObject
    >;

    "TreasuryUpdated(address)": TypedContractEvent<
      TreasuryUpdatedEvent.InputTuple,
      TreasuryUpdatedEvent.OutputTuple,
      TreasuryUpdatedEvent.OutputObject
    >;
    TreasuryUpdated: TypedContractEvent<
      TreasuryUpdatedEvent.InputTuple,
      TreasuryUpdatedEvent.OutputTuple,
      TreasuryUpdatedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
