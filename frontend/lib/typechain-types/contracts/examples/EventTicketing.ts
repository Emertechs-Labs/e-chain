/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface EventTicketingInterface extends Interface {
  getFunction(
    nameOrSignature: "createEvent" | "events" | "owner"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "EventCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "createEvent",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "events",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "createEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "events", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
}

export namespace EventCreatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    name: string,
    date: BigNumberish,
    ticketPrice: BigNumberish,
    ticketCount: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    name: string,
    date: bigint,
    ticketPrice: bigint,
    ticketCount: bigint
  ];
  export interface OutputObject {
    id: bigint;
    name: string;
    date: bigint;
    ticketPrice: bigint;
    ticketCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EventTicketing extends BaseContract {
  connect(runner?: ContractRunner | null): EventTicketing;
  waitForDeployment(): Promise<this>;

  interface: EventTicketingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createEvent: TypedContractMethod<
    [
      name: string,
      date: BigNumberish,
      ticketPrice: BigNumberish,
      ticketCount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  events: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint, bigint, string] & {
        id: bigint;
        name: string;
        date: bigint;
        ticketPrice: bigint;
        ticketCount: bigint;
        ticketsSold: bigint;
        organizer: string;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createEvent"
  ): TypedContractMethod<
    [
      name: string,
      date: BigNumberish,
      ticketPrice: BigNumberish,
      ticketCount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "events"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint, bigint, string] & {
        id: bigint;
        name: string;
        date: bigint;
        ticketPrice: bigint;
        ticketCount: bigint;
        ticketsSold: bigint;
        organizer: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "EventCreated"
  ): TypedContractEvent<
    EventCreatedEvent.InputTuple,
    EventCreatedEvent.OutputTuple,
    EventCreatedEvent.OutputObject
  >;

  filters: {
    "EventCreated(uint256,string,uint256,uint256,uint256)": TypedContractEvent<
      EventCreatedEvent.InputTuple,
      EventCreatedEvent.OutputTuple,
      EventCreatedEvent.OutputObject
    >;
    EventCreated: TypedContractEvent<
      EventCreatedEvent.InputTuple,
      EventCreatedEvent.OutputTuple,
      EventCreatedEvent.OutputObject
    >;
  };
}
