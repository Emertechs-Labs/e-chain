/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IEventFactory {
  export type EventStruct = {
    id: BigNumberish;
    organizer: AddressLike;
    ticketContract: AddressLike;
    poapContract: AddressLike;
    incentiveContract: AddressLike;
    name: string;
    metadataURI: string;
    ticketPrice: BigNumberish;
    maxTickets: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    isActive: boolean;
    createdAt: BigNumberish;
  };

  export type EventStructOutput = [
    id: bigint,
    organizer: string,
    ticketContract: string,
    poapContract: string,
    incentiveContract: string,
    name: string,
    metadataURI: string,
    ticketPrice: bigint,
    maxTickets: bigint,
    startTime: bigint,
    endTime: bigint,
    isActive: boolean,
    createdAt: bigint
  ] & {
    id: bigint;
    organizer: string;
    ticketContract: string;
    poapContract: string;
    incentiveContract: string;
    name: string;
    metadataURI: string;
    ticketPrice: bigint;
    maxTickets: bigint;
    startTime: bigint;
    endTime: bigint;
    isActive: boolean;
    createdAt: bigint;
  };
}

export interface IEventFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createEvent"
      | "eventCount"
      | "getActiveEvents"
      | "getEventDetails"
      | "getOrganizerEvents"
      | "isVerifiedOrganizer"
      | "organizerEvents"
      | "platformFeeBps"
      | "treasury"
      | "verifiedOrganizers"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EventCreated"
      | "EventStatusChanged"
      | "EventUpdated"
      | "OrganizerUnverified"
      | "OrganizerVerified"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createEvent",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "eventCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveEvents",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEventDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrganizerEvents",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isVerifiedOrganizer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "organizerEvents",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "platformFeeBps",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verifiedOrganizers",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "createEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eventCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActiveEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEventDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrganizerEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVerifiedOrganizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "organizerEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifiedOrganizers",
    data: BytesLike
  ): Result;
}

export namespace EventCreatedEvent {
  export type InputTuple = [
    eventId: BigNumberish,
    organizer: AddressLike,
    ticketContract: AddressLike,
    name: string,
    ticketPrice: BigNumberish,
    maxTickets: BigNumberish
  ];
  export type OutputTuple = [
    eventId: bigint,
    organizer: string,
    ticketContract: string,
    name: string,
    ticketPrice: bigint,
    maxTickets: bigint
  ];
  export interface OutputObject {
    eventId: bigint;
    organizer: string;
    ticketContract: string;
    name: string;
    ticketPrice: bigint;
    maxTickets: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EventStatusChangedEvent {
  export type InputTuple = [eventId: BigNumberish, isActive: boolean];
  export type OutputTuple = [eventId: bigint, isActive: boolean];
  export interface OutputObject {
    eventId: bigint;
    isActive: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EventUpdatedEvent {
  export type InputTuple = [
    eventId: BigNumberish,
    name: string,
    metadataURI: string
  ];
  export type OutputTuple = [
    eventId: bigint,
    name: string,
    metadataURI: string
  ];
  export interface OutputObject {
    eventId: bigint;
    name: string;
    metadataURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrganizerUnverifiedEvent {
  export type InputTuple = [organizer: AddressLike];
  export type OutputTuple = [organizer: string];
  export interface OutputObject {
    organizer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrganizerVerifiedEvent {
  export type InputTuple = [organizer: AddressLike];
  export type OutputTuple = [organizer: string];
  export interface OutputObject {
    organizer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IEventFactory extends BaseContract {
  connect(runner?: ContractRunner | null): IEventFactory;
  waitForDeployment(): Promise<this>;

  interface: IEventFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createEvent: TypedContractMethod<
    [
      name: string,
      metadataURI: string,
      ticketPrice: BigNumberish,
      maxTickets: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  eventCount: TypedContractMethod<[], [bigint], "view">;

  getActiveEvents: TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish],
    [[bigint[], boolean] & { eventIds: bigint[]; hasMore: boolean }],
    "view"
  >;

  getEventDetails: TypedContractMethod<
    [eventId: BigNumberish],
    [IEventFactory.EventStructOutput],
    "view"
  >;

  getOrganizerEvents: TypedContractMethod<
    [organizer: AddressLike],
    [bigint[]],
    "view"
  >;

  isVerifiedOrganizer: TypedContractMethod<
    [organizer: AddressLike],
    [boolean],
    "view"
  >;

  organizerEvents: TypedContractMethod<
    [organizer: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;

  platformFeeBps: TypedContractMethod<[], [bigint], "view">;

  treasury: TypedContractMethod<[], [string], "view">;

  verifiedOrganizers: TypedContractMethod<
    [organizer: AddressLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createEvent"
  ): TypedContractMethod<
    [
      name: string,
      metadataURI: string,
      ticketPrice: BigNumberish,
      maxTickets: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "eventCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getActiveEvents"
  ): TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish],
    [[bigint[], boolean] & { eventIds: bigint[]; hasMore: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEventDetails"
  ): TypedContractMethod<
    [eventId: BigNumberish],
    [IEventFactory.EventStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOrganizerEvents"
  ): TypedContractMethod<[organizer: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "isVerifiedOrganizer"
  ): TypedContractMethod<[organizer: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "organizerEvents"
  ): TypedContractMethod<
    [organizer: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "platformFeeBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "verifiedOrganizers"
  ): TypedContractMethod<[organizer: AddressLike], [boolean], "view">;

  getEvent(
    key: "EventCreated"
  ): TypedContractEvent<
    EventCreatedEvent.InputTuple,
    EventCreatedEvent.OutputTuple,
    EventCreatedEvent.OutputObject
  >;
  getEvent(
    key: "EventStatusChanged"
  ): TypedContractEvent<
    EventStatusChangedEvent.InputTuple,
    EventStatusChangedEvent.OutputTuple,
    EventStatusChangedEvent.OutputObject
  >;
  getEvent(
    key: "EventUpdated"
  ): TypedContractEvent<
    EventUpdatedEvent.InputTuple,
    EventUpdatedEvent.OutputTuple,
    EventUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OrganizerUnverified"
  ): TypedContractEvent<
    OrganizerUnverifiedEvent.InputTuple,
    OrganizerUnverifiedEvent.OutputTuple,
    OrganizerUnverifiedEvent.OutputObject
  >;
  getEvent(
    key: "OrganizerVerified"
  ): TypedContractEvent<
    OrganizerVerifiedEvent.InputTuple,
    OrganizerVerifiedEvent.OutputTuple,
    OrganizerVerifiedEvent.OutputObject
  >;

  filters: {
    "EventCreated(uint256,address,address,string,uint256,uint256)": TypedContractEvent<
      EventCreatedEvent.InputTuple,
      EventCreatedEvent.OutputTuple,
      EventCreatedEvent.OutputObject
    >;
    EventCreated: TypedContractEvent<
      EventCreatedEvent.InputTuple,
      EventCreatedEvent.OutputTuple,
      EventCreatedEvent.OutputObject
    >;

    "EventStatusChanged(uint256,bool)": TypedContractEvent<
      EventStatusChangedEvent.InputTuple,
      EventStatusChangedEvent.OutputTuple,
      EventStatusChangedEvent.OutputObject
    >;
    EventStatusChanged: TypedContractEvent<
      EventStatusChangedEvent.InputTuple,
      EventStatusChangedEvent.OutputTuple,
      EventStatusChangedEvent.OutputObject
    >;

    "EventUpdated(uint256,string,string)": TypedContractEvent<
      EventUpdatedEvent.InputTuple,
      EventUpdatedEvent.OutputTuple,
      EventUpdatedEvent.OutputObject
    >;
    EventUpdated: TypedContractEvent<
      EventUpdatedEvent.InputTuple,
      EventUpdatedEvent.OutputTuple,
      EventUpdatedEvent.OutputObject
    >;

    "OrganizerUnverified(address)": TypedContractEvent<
      OrganizerUnverifiedEvent.InputTuple,
      OrganizerUnverifiedEvent.OutputTuple,
      OrganizerUnverifiedEvent.OutputObject
    >;
    OrganizerUnverified: TypedContractEvent<
      OrganizerUnverifiedEvent.InputTuple,
      OrganizerUnverifiedEvent.OutputTuple,
      OrganizerUnverifiedEvent.OutputObject
    >;

    "OrganizerVerified(address)": TypedContractEvent<
      OrganizerVerifiedEvent.InputTuple,
      OrganizerVerifiedEvent.OutputTuple,
      OrganizerVerifiedEvent.OutputObject
    >;
    OrganizerVerified: TypedContractEvent<
      OrganizerVerifiedEvent.InputTuple,
      OrganizerVerifiedEvent.OutputTuple,
      OrganizerVerifiedEvent.OutputObject
    >;
  };
}
