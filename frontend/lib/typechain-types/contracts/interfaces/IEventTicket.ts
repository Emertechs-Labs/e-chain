/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IEventTicket {
  export type TicketInfoStruct = {
    eventId: BigNumberish;
    seatNumber: BigNumberish;
    tier: BigNumberish;
    isUsed: boolean;
    mintedAt: BigNumberish;
    originalBuyer: AddressLike;
  };

  export type TicketInfoStructOutput = [
    eventId: bigint,
    seatNumber: bigint,
    tier: bigint,
    isUsed: boolean,
    mintedAt: bigint,
    originalBuyer: string
  ] & {
    eventId: bigint;
    seatNumber: bigint;
    tier: bigint;
    isUsed: boolean;
    mintedAt: bigint;
    originalBuyer: string;
  };
}

export interface IEventTicketInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approve"
      | "balanceOf"
      | "batchMintTickets"
      | "eventId"
      | "factory"
      | "getApproved"
      | "getOwnerTickets"
      | "getTicketInfo"
      | "initialize"
      | "isApprovedForAll"
      | "isValidTicket"
      | "maxSupply"
      | "mintTicket"
      | "organizer"
      | "ownerOf"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setTransferRestriction"
      | "supportsInterface"
      | "ticketPrice"
      | "ticketsRemaining"
      | "totalSold"
      | "transferFrom"
      | "useTicket"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "FundsWithdrawn"
      | "RoyaltyInfoUpdated"
      | "TicketMinted"
      | "TicketTransferRestricted"
      | "TicketUsed"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "batchMintTickets",
    values: [AddressLike[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "eventId", values?: undefined): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerTickets",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTicketInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidTicket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "maxSupply", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintTicket",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "organizer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransferRestriction",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ticketPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ticketsRemaining",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "totalSold", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "useTicket",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchMintTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eventId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTicketInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxSupply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintTicket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "organizer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransferRestriction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketsRemaining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalSold", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "useTicket", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsWithdrawnEvent {
  export type InputTuple = [owner: AddressLike, amount: BigNumberish];
  export type OutputTuple = [owner: string, amount: bigint];
  export interface OutputObject {
    owner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoyaltyInfoUpdatedEvent {
  export type InputTuple = [recipient: AddressLike, feeBps: BigNumberish];
  export type OutputTuple = [recipient: string, feeBps: bigint];
  export interface OutputObject {
    recipient: string;
    feeBps: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TicketMintedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    to: AddressLike,
    eventId: BigNumberish,
    seatNumber: BigNumberish,
    tier: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    to: string,
    eventId: bigint,
    seatNumber: bigint,
    tier: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    to: string;
    eventId: bigint;
    seatNumber: bigint;
    tier: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TicketTransferRestrictedEvent {
  export type InputTuple = [tokenId: BigNumberish, restricted: boolean];
  export type OutputTuple = [tokenId: bigint, restricted: boolean];
  export interface OutputObject {
    tokenId: bigint;
    restricted: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TicketUsedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    holder: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    holder: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    holder: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IEventTicket extends BaseContract {
  connect(runner?: ContractRunner | null): IEventTicket;
  waitForDeployment(): Promise<this>;

  interface: IEventTicketInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  batchMintTickets: TypedContractMethod<
    [to: AddressLike[], seatNumbers: BigNumberish[], tiers: BigNumberish[]],
    [bigint[]],
    "payable"
  >;

  eventId: TypedContractMethod<[], [bigint], "view">;

  factory: TypedContractMethod<[], [string], "view">;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getOwnerTickets: TypedContractMethod<
    [owner: AddressLike],
    [bigint[]],
    "view"
  >;

  getTicketInfo: TypedContractMethod<
    [tokenId: BigNumberish],
    [IEventTicket.TicketInfoStructOutput],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      name: string,
      symbol: string,
      organizer: AddressLike,
      eventId: BigNumberish,
      ticketPrice: BigNumberish,
      maxSupply: BigNumberish,
      factory: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  isValidTicket: TypedContractMethod<
    [tokenId: BigNumberish],
    [boolean],
    "view"
  >;

  maxSupply: TypedContractMethod<[], [bigint], "view">;

  mintTicket: TypedContractMethod<
    [to: AddressLike, seatNumber: BigNumberish, tier: BigNumberish],
    [bigint],
    "payable"
  >;

  organizer: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setTransferRestriction: TypedContractMethod<
    [tokenId: BigNumberish, restricted: boolean],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  ticketPrice: TypedContractMethod<[], [bigint], "view">;

  ticketsRemaining: TypedContractMethod<[], [bigint], "view">;

  totalSold: TypedContractMethod<[], [bigint], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  useTicket: TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "batchMintTickets"
  ): TypedContractMethod<
    [to: AddressLike[], seatNumbers: BigNumberish[], tiers: BigNumberish[]],
    [bigint[]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "eventId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getOwnerTickets"
  ): TypedContractMethod<[owner: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getTicketInfo"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [IEventTicket.TicketInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      name: string,
      symbol: string,
      organizer: AddressLike,
      eventId: BigNumberish,
      ticketPrice: BigNumberish,
      maxSupply: BigNumberish,
      factory: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isValidTicket"
  ): TypedContractMethod<[tokenId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "maxSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mintTicket"
  ): TypedContractMethod<
    [to: AddressLike, seatNumber: BigNumberish, tier: BigNumberish],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "organizer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTransferRestriction"
  ): TypedContractMethod<
    [tokenId: BigNumberish, restricted: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "ticketPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ticketsRemaining"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "useTicket"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "FundsWithdrawn"
  ): TypedContractEvent<
    FundsWithdrawnEvent.InputTuple,
    FundsWithdrawnEvent.OutputTuple,
    FundsWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "RoyaltyInfoUpdated"
  ): TypedContractEvent<
    RoyaltyInfoUpdatedEvent.InputTuple,
    RoyaltyInfoUpdatedEvent.OutputTuple,
    RoyaltyInfoUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TicketMinted"
  ): TypedContractEvent<
    TicketMintedEvent.InputTuple,
    TicketMintedEvent.OutputTuple,
    TicketMintedEvent.OutputObject
  >;
  getEvent(
    key: "TicketTransferRestricted"
  ): TypedContractEvent<
    TicketTransferRestrictedEvent.InputTuple,
    TicketTransferRestrictedEvent.OutputTuple,
    TicketTransferRestrictedEvent.OutputObject
  >;
  getEvent(
    key: "TicketUsed"
  ): TypedContractEvent<
    TicketUsedEvent.InputTuple,
    TicketUsedEvent.OutputTuple,
    TicketUsedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "FundsWithdrawn(address,uint256)": TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;
    FundsWithdrawn: TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;

    "RoyaltyInfoUpdated(address,uint96)": TypedContractEvent<
      RoyaltyInfoUpdatedEvent.InputTuple,
      RoyaltyInfoUpdatedEvent.OutputTuple,
      RoyaltyInfoUpdatedEvent.OutputObject
    >;
    RoyaltyInfoUpdated: TypedContractEvent<
      RoyaltyInfoUpdatedEvent.InputTuple,
      RoyaltyInfoUpdatedEvent.OutputTuple,
      RoyaltyInfoUpdatedEvent.OutputObject
    >;

    "TicketMinted(uint256,address,uint256,uint256,uint256)": TypedContractEvent<
      TicketMintedEvent.InputTuple,
      TicketMintedEvent.OutputTuple,
      TicketMintedEvent.OutputObject
    >;
    TicketMinted: TypedContractEvent<
      TicketMintedEvent.InputTuple,
      TicketMintedEvent.OutputTuple,
      TicketMintedEvent.OutputObject
    >;

    "TicketTransferRestricted(uint256,bool)": TypedContractEvent<
      TicketTransferRestrictedEvent.InputTuple,
      TicketTransferRestrictedEvent.OutputTuple,
      TicketTransferRestrictedEvent.OutputObject
    >;
    TicketTransferRestricted: TypedContractEvent<
      TicketTransferRestrictedEvent.InputTuple,
      TicketTransferRestrictedEvent.OutputTuple,
      TicketTransferRestrictedEvent.OutputObject
    >;

    "TicketUsed(uint256,address,uint256)": TypedContractEvent<
      TicketUsedEvent.InputTuple,
      TicketUsedEvent.OutputTuple,
      TicketUsedEvent.OutputObject
    >;
    TicketUsed: TypedContractEvent<
      TicketUsedEvent.InputTuple,
      TicketUsedEvent.OutputTuple,
      TicketUsedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
