/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IIncentiveManager {
  export type RewardStruct = {
    rewardId: BigNumberish;
    user: AddressLike;
    rewardType: string;
    eventId: BigNumberish;
    timestamp: BigNumberish;
  };

  export type RewardStructOutput = [
    rewardId: bigint,
    user: string,
    rewardType: string,
    eventId: bigint,
    timestamp: bigint
  ] & {
    rewardId: bigint;
    user: string;
    rewardType: string;
    eventId: bigint;
    timestamp: bigint;
  };
}

export interface IIncentiveManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimEarlyBird"
      | "claimLoyaltyReward"
      | "earlyBirdClaimed"
      | "generateReferralCode"
      | "getReward"
      | "loyaltyPoints"
      | "referralCodes"
      | "referralRewards"
      | "setEventFactory"
      | "setEventTicket"
      | "setPoapAttendance"
      | "updateLoyaltyPoints"
      | "useReferralCode"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimEarlyBird",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimLoyaltyReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "earlyBirdClaimed",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "generateReferralCode",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "loyaltyPoints",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "referralCodes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "referralRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setEventFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setEventTicket",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoapAttendance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLoyaltyPoints",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "useReferralCode",
    values: [BytesLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimEarlyBird",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimLoyaltyReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earlyBirdClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateReferralCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "loyaltyPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralCodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEventFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEventTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoapAttendance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLoyaltyPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "useReferralCode",
    data: BytesLike
  ): Result;
}

export interface IIncentiveManager extends BaseContract {
  connect(runner?: ContractRunner | null): IIncentiveManager;
  waitForDeployment(): Promise<this>;

  interface: IIncentiveManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimEarlyBird: TypedContractMethod<
    [eventId: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimLoyaltyReward: TypedContractMethod<
    [threshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  earlyBirdClaimed: TypedContractMethod<
    [eventId: BigNumberish, user: AddressLike],
    [boolean],
    "view"
  >;

  generateReferralCode: TypedContractMethod<
    [code: BytesLike],
    [void],
    "nonpayable"
  >;

  getReward: TypedContractMethod<
    [rewardId: BigNumberish],
    [IIncentiveManager.RewardStructOutput],
    "view"
  >;

  loyaltyPoints: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  referralCodes: TypedContractMethod<[code: BytesLike], [string], "view">;

  referralRewards: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  setEventFactory: TypedContractMethod<
    [_eventFactory: AddressLike],
    [void],
    "nonpayable"
  >;

  setEventTicket: TypedContractMethod<
    [_eventTicket: AddressLike],
    [void],
    "nonpayable"
  >;

  setPoapAttendance: TypedContractMethod<
    [_poapAttendance: AddressLike],
    [void],
    "nonpayable"
  >;

  updateLoyaltyPoints: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  useReferralCode: TypedContractMethod<
    [code: BytesLike, invitee: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimEarlyBird"
  ): TypedContractMethod<[eventId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimLoyaltyReward"
  ): TypedContractMethod<[threshold: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "earlyBirdClaimed"
  ): TypedContractMethod<
    [eventId: BigNumberish, user: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "generateReferralCode"
  ): TypedContractMethod<[code: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getReward"
  ): TypedContractMethod<
    [rewardId: BigNumberish],
    [IIncentiveManager.RewardStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "loyaltyPoints"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "referralCodes"
  ): TypedContractMethod<[code: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "referralRewards"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "setEventFactory"
  ): TypedContractMethod<[_eventFactory: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setEventTicket"
  ): TypedContractMethod<[_eventTicket: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPoapAttendance"
  ): TypedContractMethod<[_poapAttendance: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateLoyaltyPoints"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "useReferralCode"
  ): TypedContractMethod<
    [code: BytesLike, invitee: AddressLike],
    [void],
    "nonpayable"
  >;

  filters: {};
}
