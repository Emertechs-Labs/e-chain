/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IPOAPAttendance {
  export type AttendanceStruct = {
    eventId: BigNumberish;
    tokenId: BigNumberish;
    attendee: AddressLike;
    timestamp: BigNumberish;
  };

  export type AttendanceStructOutput = [
    eventId: bigint,
    tokenId: bigint,
    attendee: string,
    timestamp: bigint
  ] & { eventId: bigint; tokenId: bigint; attendee: string; timestamp: bigint };
}

export interface IPOAPAttendanceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "balanceOf"
      | "getAttendance"
      | "hasClaimed"
      | "setEventFactory"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAttendance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasClaimed",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setEventFactory",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAttendance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasClaimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setEventFactory",
    data: BytesLike
  ): Result;
}

export interface IPOAPAttendance extends BaseContract {
  connect(runner?: ContractRunner | null): IPOAPAttendance;
  waitForDeployment(): Promise<this>;

  interface: IPOAPAttendanceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  getAttendance: TypedContractMethod<
    [tokenId: BigNumberish],
    [IPOAPAttendance.AttendanceStructOutput],
    "view"
  >;

  hasClaimed: TypedContractMethod<
    [eventId: BigNumberish, attendee: AddressLike],
    [boolean],
    "view"
  >;

  setEventFactory: TypedContractMethod<
    [_eventFactory: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAttendance"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [IPOAPAttendance.AttendanceStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasClaimed"
  ): TypedContractMethod<
    [eventId: BigNumberish, attendee: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "setEventFactory"
  ): TypedContractMethod<[_eventFactory: AddressLike], [void], "nonpayable">;

  filters: {};
}
