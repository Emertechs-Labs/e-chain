/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IncentiveManager {
  export type RewardStruct = {
    rewardId: BigNumberish;
    user: AddressLike;
    rewardType: string;
    eventId: BigNumberish;
    timestamp: BigNumberish;
  };

  export type RewardStructOutput = [
    rewardId: bigint,
    user: string,
    rewardType: string,
    eventId: bigint,
    timestamp: bigint
  ] & {
    rewardId: bigint;
    user: string;
    rewardType: string;
    eventId: bigint;
    timestamp: bigint;
  };
}

export interface IncentiveManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approve"
      | "balanceOf"
      | "claimEarlyBird"
      | "claimLoyaltyReward"
      | "earlyBirdClaimed"
      | "earlyBirdLimit"
      | "eventFactory"
      | "eventTicket"
      | "generateReferralCode"
      | "getApproved"
      | "getReferralCode"
      | "getReward"
      | "isApprovedForAll"
      | "loyaltyPoints"
      | "name"
      | "nextRewardId"
      | "owner"
      | "ownerOf"
      | "pause"
      | "paused"
      | "poapAttendance"
      | "referralCodes"
      | "referralRewards"
      | "referredBy"
      | "renounceOwnership"
      | "rewards"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setEarlyBirdLimit"
      | "setEventFactory"
      | "setEventTicket"
      | "setPoapAttendance"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "transferFrom"
      | "transferOwnership"
      | "unpause"
      | "updateLoyaltyPoints"
      | "useReferralCode"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "OwnershipTransferred"
      | "Paused"
      | "ReferralCodeGenerated"
      | "ReferralUsed"
      | "RewardMinted"
      | "Transfer"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimEarlyBird",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimLoyaltyReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "earlyBirdClaimed",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "earlyBirdLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eventFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eventTicket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generateReferralCode",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReferralCode",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "loyaltyPoints",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextRewardId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poapAttendance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referralCodes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "referralRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "referredBy",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setEarlyBirdLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEventFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setEventTicket",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoapAttendance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateLoyaltyPoints",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "useReferralCode",
    values: [BytesLike, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimEarlyBird",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimLoyaltyReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earlyBirdClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earlyBirdLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eventFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eventTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateReferralCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferralCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loyaltyPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextRewardId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poapAttendance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralCodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "referredBy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEarlyBirdLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEventFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEventTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoapAttendance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateLoyaltyPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "useReferralCode",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferralCodeGeneratedEvent {
  export type InputTuple = [code: BytesLike, inviter: AddressLike];
  export type OutputTuple = [code: string, inviter: string];
  export interface OutputObject {
    code: string;
    inviter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferralUsedEvent {
  export type InputTuple = [invitee: AddressLike, inviter: AddressLike];
  export type OutputTuple = [invitee: string, inviter: string];
  export interface OutputObject {
    invitee: string;
    inviter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardMintedEvent {
  export type InputTuple = [
    rewardId: BigNumberish,
    user: AddressLike,
    rewardType: string,
    eventId: BigNumberish
  ];
  export type OutputTuple = [
    rewardId: bigint,
    user: string,
    rewardType: string,
    eventId: bigint
  ];
  export interface OutputObject {
    rewardId: bigint;
    user: string;
    rewardType: string;
    eventId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IncentiveManager extends BaseContract {
  connect(runner?: ContractRunner | null): IncentiveManager;
  waitForDeployment(): Promise<this>;

  interface: IncentiveManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  claimEarlyBird: TypedContractMethod<
    [eventId: BigNumberish, ticketContract: AddressLike],
    [void],
    "nonpayable"
  >;

  claimLoyaltyReward: TypedContractMethod<
    [threshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  earlyBirdClaimed: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  earlyBirdLimit: TypedContractMethod<[], [bigint], "view">;

  eventFactory: TypedContractMethod<[], [string], "view">;

  eventTicket: TypedContractMethod<[], [string], "view">;

  generateReferralCode: TypedContractMethod<
    [code: BytesLike],
    [void],
    "nonpayable"
  >;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getReferralCode: TypedContractMethod<[code: BytesLike], [string], "view">;

  getReward: TypedContractMethod<
    [rewardId: BigNumberish],
    [IncentiveManager.RewardStructOutput],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  loyaltyPoints: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  nextRewardId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  poapAttendance: TypedContractMethod<[], [string], "view">;

  referralCodes: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  referralRewards: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  referredBy: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rewards: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, bigint] & {
        rewardId: bigint;
        user: string;
        rewardType: string;
        eventId: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setEarlyBirdLimit: TypedContractMethod<
    [_limit: BigNumberish],
    [void],
    "nonpayable"
  >;

  setEventFactory: TypedContractMethod<
    [_eventFactory: AddressLike],
    [void],
    "nonpayable"
  >;

  setEventTicket: TypedContractMethod<
    [_eventTicket: AddressLike],
    [void],
    "nonpayable"
  >;

  setPoapAttendance: TypedContractMethod<
    [_poapAttendance: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateLoyaltyPoints: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  useReferralCode: TypedContractMethod<
    [code: BytesLike, invitee: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimEarlyBird"
  ): TypedContractMethod<
    [eventId: BigNumberish, ticketContract: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimLoyaltyReward"
  ): TypedContractMethod<[threshold: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "earlyBirdClaimed"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "earlyBirdLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "eventFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "eventTicket"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "generateReferralCode"
  ): TypedContractMethod<[code: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getReferralCode"
  ): TypedContractMethod<[code: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getReward"
  ): TypedContractMethod<
    [rewardId: BigNumberish],
    [IncentiveManager.RewardStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "loyaltyPoints"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nextRewardId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "poapAttendance"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "referralCodes"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "referralRewards"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "referredBy"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewards"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, bigint] & {
        rewardId: bigint;
        user: string;
        rewardType: string;
        eventId: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setEarlyBirdLimit"
  ): TypedContractMethod<[_limit: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setEventFactory"
  ): TypedContractMethod<[_eventFactory: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setEventTicket"
  ): TypedContractMethod<[_eventTicket: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPoapAttendance"
  ): TypedContractMethod<[_poapAttendance: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateLoyaltyPoints"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "useReferralCode"
  ): TypedContractMethod<
    [code: BytesLike, invitee: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "ReferralCodeGenerated"
  ): TypedContractEvent<
    ReferralCodeGeneratedEvent.InputTuple,
    ReferralCodeGeneratedEvent.OutputTuple,
    ReferralCodeGeneratedEvent.OutputObject
  >;
  getEvent(
    key: "ReferralUsed"
  ): TypedContractEvent<
    ReferralUsedEvent.InputTuple,
    ReferralUsedEvent.OutputTuple,
    ReferralUsedEvent.OutputObject
  >;
  getEvent(
    key: "RewardMinted"
  ): TypedContractEvent<
    RewardMintedEvent.InputTuple,
    RewardMintedEvent.OutputTuple,
    RewardMintedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "ReferralCodeGenerated(bytes32,address)": TypedContractEvent<
      ReferralCodeGeneratedEvent.InputTuple,
      ReferralCodeGeneratedEvent.OutputTuple,
      ReferralCodeGeneratedEvent.OutputObject
    >;
    ReferralCodeGenerated: TypedContractEvent<
      ReferralCodeGeneratedEvent.InputTuple,
      ReferralCodeGeneratedEvent.OutputTuple,
      ReferralCodeGeneratedEvent.OutputObject
    >;

    "ReferralUsed(address,address)": TypedContractEvent<
      ReferralUsedEvent.InputTuple,
      ReferralUsedEvent.OutputTuple,
      ReferralUsedEvent.OutputObject
    >;
    ReferralUsed: TypedContractEvent<
      ReferralUsedEvent.InputTuple,
      ReferralUsedEvent.OutputTuple,
      ReferralUsedEvent.OutputObject
    >;

    "RewardMinted(uint256,address,string,uint256)": TypedContractEvent<
      RewardMintedEvent.InputTuple,
      RewardMintedEvent.OutputTuple,
      RewardMintedEvent.OutputObject
    >;
    RewardMinted: TypedContractEvent<
      RewardMintedEvent.InputTuple,
      RewardMintedEvent.OutputTuple,
      RewardMintedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
