/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  EventTicketing,
  EventTicketingInterface,
} from "../../../contracts/examples/EventTicketing";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "NotOwner",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "date",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "ticketPrice",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "ticketCount",
        type: "uint256",
      },
    ],
    name: "EventCreated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "date",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "ticketPrice",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "ticketCount",
        type: "uint256",
      },
    ],
    name: "createEvent",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "events",
    outputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "date",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "ticketPrice",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "ticketCount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "ticketsSold",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "organizer",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50600280546001600160a01b0319163317905561079a806100326000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630374ab0b146100465780630b7914301461005b5780638da5cb5b1461008a575b600080fd5b610059610054366004610358565b6100cf565b005b61006e61006936600461043b565b61024f565b60405161008197969594939291906104b8565b60405180910390f35b6002546100aa9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610081565b60025473ffffffffffffffffffffffffffffffffffffffff163314610120576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001805490600061013083610511565b9091555050600180546040805160e08101825282815260208082018981528284018990526060830188905260808301879052600060a084018190523360c08501528581529182905292902081518155915192939092908201906101939082610614565b506040828101516002830155606083015160038301556080830151600483015560a0830151600583015560c090920151600690910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055517f72deeb9ef57375133dcdf3dd5ba7a069d5bb62851a22ce62f0f3bbd7a4343aef90610240908390889088908890889061072e565b60405180910390a15050505050565b6000602081905290815260409020805460018201805491929161027190610570565b80601f016020809104026020016040519081016040528092919081815260200182805461029d90610570565b80156102ea5780601f106102bf576101008083540402835291602001916102ea565b820191906000526020600020905b8154815290600101906020018083116102cd57829003601f168201915b505050600284015460038501546004860154600587015460069097015495969295919450925073ffffffffffffffffffffffffffffffffffffffff1687565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806000806080858703121561036e57600080fd5b843567ffffffffffffffff8082111561038657600080fd5b818701915087601f83011261039a57600080fd5b8135818111156103ac576103ac610329565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156103f2576103f2610329565b816040528281528a602084870101111561040b57600080fd5b82602086016020830137600060209382018401529a91890135995050604088013597606001359650945050505050565b60006020828403121561044d57600080fd5b5035919050565b6000815180845260005b8181101561047a5760208185018101518683018201520161045e565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b87815260e0602082015260006104d160e0830189610454565b6040830197909752506060810194909452608084019290925260a083015273ffffffffffffffffffffffffffffffffffffffff1660c09091015292915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610569577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b600181811c9082168061058457607f821691505b6020821081036105bd577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f82111561060f576000816000526020600020601f850160051c810160208610156105ec5750805b601f850160051c820191505b8181101561060b578281556001016105f8565b5050505b505050565b815167ffffffffffffffff81111561062e5761062e610329565b6106428161063c8454610570565b846105c3565b602080601f831160018114610695576000841561065f5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b17855561060b565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b828110156106e2578886015182559484019460019091019084016106c3565b508582101561071e57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b85815260a06020820152600061074760a0830187610454565b60408301959095525060608101929092526080909101529291505056fea2646970667358221220d24ca46a6ab8682777bb99007ed8096dc280a8c27e1efc5898c29fafabd01ac464736f6c63430008180033";

type EventTicketingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EventTicketingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EventTicketing__factory extends ContractFactory {
  constructor(...args: EventTicketingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      EventTicketing & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): EventTicketing__factory {
    return super.connect(runner) as EventTicketing__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EventTicketingInterface {
    return new Interface(_abi) as EventTicketingInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): EventTicketing {
    return new Contract(address, _abi, runner) as unknown as EventTicketing;
  }
}
