#!/bin/bash

# Master Test Runner for Echain Production Testing
# Runs all production tests in sequence

echo "🚀 ECHAIN PRODUCTION TESTING SUITE 🚀"
echo "======================================"
echo "Testing live application at: https://echain-eight.vercel.app/"
echo "Date: $(date)"
echo ""

# Create results directory
RESULTS_DIR="test_results_$(date +%Y%m%d_%H%M%S)"
mkdir -p "$RESULTS_DIR"
echo "Results will be saved to: $RESULTS_DIR/"
echo ""

# Function to run test and capture results
run_test() {
    local test_name=$1
    local script_path=$2
    local description=$3
    
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo "🧪 Running: $test_name"
    echo "Description: $description"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo ""
    
    if [ -f "$script_path" ]; then
        cd "$(dirname "$0")" || exit 1
        bash "$script_path" > "$RESULTS_DIR/${test_name}_results.log" 2>&1
        local exit_code=$?
        
        if [ $exit_code -eq 0 ]; then
            echo "✅ $test_name completed successfully"
        else
            echo "❌ $test_name failed with exit code $exit_code"
        fi
        
        echo "📄 Results saved to: $RESULTS_DIR/${test_name}_results.log"
    else
        echo "❌ Test script not found: $script_path"
    fi
    
    echo ""
    sleep 2
}

# Run individual tests
echo "Starting comprehensive production testing..."
echo ""

# Test 1: Blockchain Contract Tests
run_test "blockchain_contracts" \
         "cd ../blockchain && npm test" \
         "Smart contract unit tests and functionality verification"

# Test 2: Frontend Integration Tests
run_test "frontend_integration" \
         "cd ../frontend && npm run test" \
         "Frontend component tests and contract integration"

# Test 3: End-to-End Deployment Tests
run_test "deployment_verification" \
         "cd ../blockchain && npm run deploy:events:dev" \
         "Verify deployment scripts work correctly"

# Generate summary report
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "📊 GENERATING SUMMARY REPORT"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

SUMMARY_FILE="$RESULTS_DIR/SUMMARY_REPORT.md"

cat > "$SUMMARY_FILE" << EOF
# Echain Production Testing Summary Report

**Test Date:** $(date)  
**Application URL:** https://echain-eight.vercel.app/  
**Network:** Base Sepolia Testnet (Chain ID: 84532)  
**Results Directory:** $RESULTS_DIR/

## Test Overview

This report summarizes the results of comprehensive production testing for the Echain DApp using direct contract integration.

## Tests Performed

### 1. Blockchain Contract Tests
- **File:** blockchain_contracts_results.log
- **Focus:** Smart contract functionality and unit tests
- **Key Areas:** 
  - Contract compilation and deployment
  - Unit test execution
  - Gas optimization verification
  - Security property validation

### 2. Frontend Integration Tests
- **File:** frontend_integration_results.log
- **Focus:** Frontend component and contract integration testing
- **Key Areas:**
  - Component rendering and interactions
  - Contract read/write operations
  - Wallet connection handling
  - Error state management

### 3. Deployment Verification Tests
- **File:** deployment_verification_results.log
- **Focus:** Deployment script validation and contract addresses
- **Key Areas:**
  - Deployment script execution
  - Contract address verification
  - Network connectivity testing
  - Configuration validation

## Quick Results Analysis

To analyze the results:

1. **Check Test Results:** Look for PASSED vs FAILED test outcomes
2. **Review Gas Usage:** Identify optimization opportunities
3. **Examine Error Messages:** Understand any contract or integration issues
4. **Validate Deployment:** Ensure contracts are properly deployed and accessible

## Common Issues to Look For

- **Compilation Errors:** Contract syntax or dependency issues
- **Test Failures:** Logic errors in smart contracts
- **Deployment Failures:** Network connectivity or configuration problems
- **Integration Issues:** Frontend-contract communication problems

## Next Steps

Based on the test results:

1. **If all tests pass:** Ready for production deployment
2. **If contract tests fail:** Fix smart contract logic issues
3. **If frontend tests fail:** Review contract integration code
4. **If deployment fails:** Check network configuration and deployment scripts

## Detailed Results

Review the individual log files in this directory for complete test output and debugging information.

---

**Generated by Echain Production Testing Suite**  
**Timestamp:** $(date)
EOF

echo "📄 Summary report generated: $SUMMARY_FILE"
echo ""

# Display quick overview
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "🎯 QUICK OVERVIEW"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""

# Count success/error indicators in log files
for test_file in "$RESULTS_DIR"/*_results.log; do
    if [ -f "$test_file" ]; then
        test_name=$(basename "$test_file" _results.log)
        success_count=$(grep -c "PASSED\|SUCCESS\|✅" "$test_file" 2>/dev/null || echo "0")
        error_count=$(grep -c "FAILED\|ERROR\|❌" "$test_file" 2>/dev/null || echo "0")
        
        echo "📋 $test_name:"
        echo "   ✅ Successful tests: $success_count"
        echo "   ❌ Failed tests: $error_count"
        echo ""
    fi
done

echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "🏁 TESTING COMPLETE!"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "📁 All results saved to: $RESULTS_DIR/"
echo "📊 Review the summary report: $SUMMARY_FILE"
echo ""
echo "To review detailed results:"
echo "  cd $RESULTS_DIR && ls -la"
echo ""
echo "To analyze specific test results:"
echo "  cat $RESULTS_DIR/blockchain_contracts_results.log"
echo "  cat $RESULTS_DIR/frontend_integration_results.log"
echo "  cat $RESULTS_DIR/deployment_verification_results.log"